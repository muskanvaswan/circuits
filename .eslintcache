[{"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/index.js":"1","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/App.js":"2","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Calculate.js":"3","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/parallel.js":"4","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/series.js":"5","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Multiple.js":"6","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Current.js":"7","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/parallel_current.js":"8","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/series_voltage.js":"9"},{"size":236,"mtime":1609839820000,"results":"10","hashOfConfig":"11"},{"size":647,"mtime":1610017056000,"results":"12","hashOfConfig":"11"},{"size":8032,"mtime":1610016351000,"results":"13","hashOfConfig":"11"},{"size":239,"mtime":1610009570000,"results":"14","hashOfConfig":"11"},{"size":101,"mtime":1609847382000,"results":"15","hashOfConfig":"11"},{"size":1563,"mtime":1610011599000,"results":"16","hashOfConfig":"11"},{"size":1110,"mtime":1609962405000,"results":"17","hashOfConfig":"11"},{"size":118,"mtime":1609960532000,"results":"18","hashOfConfig":"11"},{"size":116,"mtime":1610004758000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1w8qnqf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/index.js",[],["40","41"],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/App.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Calculate.js",["42"],"import React from \"react\";\nimport parallel from './../operations/parallel.js'\nimport parallel_current from './../operations/parallel_current.js'\nimport series_voltage from './../operations/series_voltage.js'\n\n\nimport series from './../operations/series.js'\n// Current from './Current';\n\n\n\nexport default class Calculate extends React.Component {\n  constructor(props){\n    super(props);\n    var i = parallel_current(0, [0,0,], 0);\n    this.state = {\n      \"resistances\": [0,0,],\n      \"type\": \"p\",\n      \"answer\":0,\n      \"currents\": i,\n      \"current\": 0,\n      \"volatge\": 0,\n      \"voltages\": i,\n      \"toggle\": true,\n    };\n  }\n\n\trender() {\n\t\treturn (\n      <div className=\"row container border border-info p-3 rounded m-0\">\n        <div className=\"col-md-10\">\n          <div className=\"row\">\n            <div className=\"col-md-8 row\">\n              {this.state.resistances.map((resistance, i) =>\n                <div className=\"col-md-6 my-1\">\n                  <div key={i} className=\" d-flex border rounded bg-light w-100\">\n                    <label htmlFor={i}  className=\"my-auto mx-1\">R{i+1}</label>\n                    <input name={i} value={resistance} draggable onDragStart={this.dragStartResistor} onChange={this.handleChange} onDragOver={this.dropHandler} onDrop={this.handleDrop} className=\"form-control\"></input>\n                    <button data-index={i} onClick={this.deleteResistor} className=\"btn btn-danger\">-</button>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"col-md-4 my-1\">\n            <div className=\"form-group\">\n              <select value={this.state.type} name=\"type\" onChange={this.handleSelect} className=\"form-control\">\n                <option value=\"s\">Series</option>\n                <option value=\"p\">parallel</option>\n              </select>\n            </div>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <button onClick={this.addResistor} className=\"btn btn-primary my-1 w-100\">+ Add Resistor</button>\n            </div>\n            <div className=\"col-md-6\">\n              <button onClick={this.calculate} className=\"btn btn-success my-1 w-100\"> ReCalculate</button>\n            </div>\n          </div>\n          <div className=\"m-2 mt-4 d-flex\">\n            <a onClick={this.handleToggle} className=\" text-primary text-center w-100 mx-auto\">\n              {this.state.toggle===false? \"Hide \" : \"View \" }\n              {this.state.type===\"p\"? \"Current Division\" : \"Volatge Division\" }\n            </a>\n          </div>\n\n        </div>\n        <div draggable onDragStart={this.dragStartAnswer} className=\"col-md-2 border rounded p-4 d-flex bg-light overflow-auto\">\n          <h2   className=\"mx-auto\">{this.state.answer}</h2>\n        </div>\n        {/*<!-- currrent division -->*/}\n        {this.state.type===\"p\" && <div className=\"container-fluid\">\n          <div className={this.state.toggle===false? null : \"collapse\" }>\n            <div className=\"row my-2\">\n\n              <div className=\"d-flex form-group col-md-3 my-3 bg-light rounded input-group mr-1\">\n                <label className=\"my-auto mx-1\" htmlFor=\"current\">Total Current</label>\n                <input name=\"current\" onChange={this.handleCurrent} value={this.state.current} draggable  className=\"form-control p-2 my-auto\"></input>\n              </div>\n              <div className=\"d-flex form-group col-md-3 my-3 bg-light rounded input-group mr-1\">\n                <label className=\"my-auto mx-1\" htmlFor=\"current\">Voltage</label>\n                <input name=\"voltage\" onChange={this.handleVoltage} value={this.state.voltage} draggable  className=\"form-control p-2 my-auto\"></input>\n              </div>\n              {this.state.currents.map((c, i) =>\n                <div className=\"col-md my-3\" key={i}>\n                  <div className=\" border rounded p-1 d-flex bg-light overflow-auto\">\n                    <p className=\"text-muted\">I{i+1}</p>\n                    <h2   className=\"m-auto \">{c}</h2>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>}\n        {/*<!-- end currrent division -->*/}\n        {/*<!-- volatge division -->*/}\n        {this.state.type===\"s\" && <div className=\"container-fluid\">\n          <div className={this.state.toggle===false? null : \"collapse\" }>\n            <div className=\"row my-2\">\n\n              <div className=\"d-flex form-group col-md-3 my-3 bg-light rounded input-group mr-1\">\n                <label className=\"my-auto mx-1\" for=\"voltage\">Total Volatge</label>\n                <input name=\"volatge\" onChange={this.handleVoltage} value={this.state.voltage} draggable  className=\"form-control p-2 my-auto\"></input>\n              </div>\n              <div className=\"d-flex form-group col-md-3 my-3 bg-light rounded input-group mr-1\">\n                <label className=\"my-auto mx-1\" for=\"current2\">Current</label>\n                <input name=\"current2\" onChange={this.handleCurrent} value={this.state.current} draggable  className=\"form-control p-2 my-auto\"></input>\n              </div>\n\n              {this.state.voltages.map((c, i) =>\n                <div className=\"col-md my-3\" key={i}>\n                  <div className=\" border rounded p-1 d-flex bg-light overflow-auto\">\n                    <p className=\"text-muted\">V{i+1}</p>\n                    <h2   className=\"m-auto \">{c}</h2>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>}\n        {/*<!-- end voltage division -->*/}\n      </div>\n    );\n\t}\n  dragStartAnswer = (e) => {\n    var ans = this.state.answer;\n    e.dataTransfer.setData('val', ans)\n  }\n  dragStartResistor = (e) => {\n    var r = e.target.value;\n    e.dataTransfer.setData('val', r)\n  }\n  dropHandler = (e) =>{\n    e.preventDefault();\n  }\n  handleDrop = (e) => {\n    var val = e.dataTransfer.getData('val');\n    this.setState(state => {\n      var l = state.resistances\n      l.[e.target.name]= val\n      return{resistances: l};\n\n    });\n    this.handleChange(e);\n\n  }\n  handleCurrent = (e) =>{\n    this.setState({\n      current: e.target.value,\n      voltage: e.target.value * this.state.answer\n    });\n    if (this.state.type===\"p\"){\n      this.currentCalculate();\n    }\n  }\n\n  currentCalculate = () => {\n    this.setState(state => ({\n      currents: parallel_current(state.current, state.resistances, state.answer),\n    }))\n  }\n\n  handleVoltage = (e) =>{\n    this.setState({\n      voltage: e.target.value,\n      current: e.target.value / this.state.answer\n    });\n    if (this.state.type ===\"s\"){\n      this.voltageCalculate();\n    }\n  }\n\n  voltageCalculate = () => {\n    this.setState(state => ({\n      voltages: series_voltage(state.voltage, state.resistances, state.answer),\n    }));\n  }\n\n  deleteResistor = (event) => {\n    const index = event.target.dataset.index\n    this.setState(state => {\n      var l = state.resistances\n      l.splice(index, 1)\n      return{resistances: l};\n\n    }, this.calculate)\n  }\n  addResistor = () => {\n    this.setState(state => ({\n      resistances: [...state.resistances, 0]\n    }))\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      type: event.target.value\n    }, this.calculate)\n  }\n\n  handleChange = (event) => {\n    var index = parseInt(event.target.name)\n    var l = this.state.resistances\n    l[index] = event.target.value\n    this.setState({\n      resistances: l\n    })\n    this.calculate();\n  }\n\n  calculate = () =>{\n    if (this.state.type === \"p\"){\n      this.setState(state => ({\n        answer: parallel(state.resistances),\n        voltage: state.current*parallel(state.resistances)\n      }));\n      this.currentCalculate();\n\n    }\n    else{\n      this.setState(state => ({\n        answer: series(state.resistances),\n        current: state.voltage/series(state.resistances)\n      }));\n      this.voltageCalculate()\n\n    }\n  }\n\n  handleToggle = () => {\n    this.setState(state => ({toggle: !state.toggle}))\n  }\n\n\n}\n","/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/parallel.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/series.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Multiple.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/components/Current.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/parallel_current.js",[],"/Users/muskanvaswan/Desktop/projects/React_rukie/hello/src/operations/series_voltage.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":63,"column":13,"nodeType":"49","endLine":63,"endColumn":96},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]